#!/usr/bin/env bash

# exit on any error
set -euo pipefail

# only output colors if our output is to terminal
use_ansi() { test -t 1; }
if use_ansi ; then
    RED="\033[0;31m"
    BOLD="\033[1m"
    CLEAR="\033[0m"
else
    RED=""
    BOLD=""
    CLEAR=""
fi

info() {
    echo
    echo -e "${BOLD}""$*""${CLEAR}"
    echo -e "${BOLD}""==================================================""${CLEAR}"
}

die() {
    echo
    echo -e "${RED}""$*""${CLEAR}" 1>&2; exit 1
    echo -e "${RED}""==================================================""${CLEAR}"
}

select_from() {
    select item in "$@"; do
        [[ "$item" != '' ]] && echo "$item" || die "Invalid selection"
        break
    done
}

###

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            cat <<EOF
Usage: $(basename $0) [--dry-run] [--first-flash] [--no-detach] [--prebuilt FIRMWARE] [-- [CARGO_FLAGS...]]

Options:
  --dry-run       Run but do not perform actions
  --first-flash   Unlock flash in a new MCU by using force:unprotect
  --no-detach     Only flash if keyboard in bootloader mode exists
  --prebuilt      Use existing firmware binary
EOF
            exit 0 ;;
        --first-flash)
            first=yes ;;
        --prebuilt)
            shift
            prebuilt="$1" ;;
        --no-detach)
            nodetach=yes ;;
        --dry-run)
            dry_run=yes ;;
        --)
            shift
            break ;;
        *)
            echo "Unknown option: $1"
            exit 1 ;;
    esac
    shift
done

# work from repository root
HERE="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
cd "$HERE/.."

target_name='ghanima'

stm32dfu_id='0483:df11'
keyboard_id='16c0:27db'
stlink_id='0483:3748'

target_bin="target/$target_name.bin"
cargo_flags="--release --features thumbv6 $*"
dfu_modifiers="leave"

# on first flashing we may ned to unprotect the flash
[[ ${first:-no} = 'yes' ]] && dfu_modifiers="force:unprotect"

info "Cargo flags: $cargo_flags"

###

check_firmware() {
    if [[ ${prebuilt:-0} = 0 ]]; then
        info "Checking firmware ..."
        cargo check $cargo_flags
    else
        info "Checking firmware (prebuilt) ..."
        test -f "$prebuilt"
    fi
}

# returns path on stdout, all messages on stderr
get_firmware() {
    if [[ ${prebuilt:-0} = 0 ]]; then
        info "Building firmware ..." 1>&2
        # build firmware
        cargo build $cargo_flags 1>&2 || die "Failed to build firmware"
        # convert to binary
        cargo objcopy $cargo_flags --bin "$target_name" -- -O binary "$target_bin" 1>&2 || die "Objcopy failed"
        echo "$target_bin"
    else
        info "Using prebuilt firmware: $prebuilt ..." 1>&2
        echo "$prebuilt"
    fi
}

# Get value of USB device string: lsusb_string VIDPID ISTRING
lsusb_string() {
    # lines look like:
    #  iManufacturer           1 inscrib.io
    # squeeze multi-spaces into single space then cut
    lsusb -d "$1" -v | grep "$2" | tr -s ' ' | cut -d ' ' -f 4-
}

find_stlink() {
    lsusb -d "$stlink_id" > /dev/null
}

find_keyboard() {
    lsusb -d "$keyboard_id" > /dev/null
}

find_bootloader() {
    lsusb -d "$stm32dfu_id" > /dev/null
}

# run dfu-util with output to stdout but also capture output
exec 5>&1
dfu_util_detach() {
    dfu-util --detach --devnum "$1" 2>&1 | tee >(cat - >&5)
}

select_keyboard_device() {
    # Read lines into an array: https://github.com/koalaman/shellcheck/wiki/Sc2046
    readarray -t candidates < <(dfu-util --list | grep "$keyboard_id")
    n="${#candidates[@]}"
    if [[ $n = 0 ]]; then
        die "No keyboards found"
    elif [[ $n = 1 ]] ; then
        selected="${candidates[0]}"
    else
        selected=$(select_from "${candidates[@]}")
    fi
    grep -o 'devnum=[0-9]\+' <<< "$selected" | cut -f 2 -d =
}

detach_keyboard() {
    find_keyboard || die "Keyboard not found"

    imanufacturer=$(lsusb_string $keyboard_id 'iManufacturer')
    iproduct=$(lsusb_string $keyboard_id 'iProduct')
    iserial=$(lsusb_string $keyboard_id 'iSerial')
    info "Found keyboard: $imanufacturer | $iproduct | $iserial"

    # check before detaching to avoid loosing keyboard unnecessarily
    check_firmware || die "Firmware check failed"

    # detach to bootloader
    info "Detaching keyboard $keyboard_id to bootloader ..."
    if [[ ${dry_run:-no} != 'yes' ]]; then
        dev=$(select_keyboard_device)
        dfu_util_detach "$dev" | \
            ( ! grep -q 'dfu-util: error detaching' ) \
            || die "Detaching to bootloader failed\nMaybe you forgot to press the AllowBootloader button on keyboard?"

    else
        die "DRY RUN: keyboard won't be detached so stopping here"
    fi
}

flash_firmware_dfu() {
    local firmware
    firmware="$(get_firmware)"

    # wait for stm32 bootloader
    info "Waiting for DFU bootloader ..."
    for _ in {1..15}; do
        find_bootloader && break
        sleep 0.2
        echo -n .
    done
    echo
    sleep 0.5 # hacky but give it some more time
    find_bootloader || die "Could not find DFU bootloader device"

    info "Flashing device ..."
    if [[ ${dry_run:-no} != 'yes' ]]; then
        dfu-util \
            --device $stm32dfu_id \
            --alt 0 \
            --dfuse-address "0x08000000:$dfu_modifiers" \
            --download "$firmware" \
            || die "Flashing via DFU failed"
    fi
}

flash_firmware_openocd() {
    local firmware
    firmware="$(get_firmware)"

    openocd \
        -f remote/openocd.cfg \
        -c "program $target_bin verify reset exit 0x08000000" \
        || die "Flashing via OpenOCD failed"
}

if find_stlink; then
    info "Found ST-LINK. Flashing using OpenOCD ..."
    flash_firmware_openocd
elif [[ ${nodetach:-no} != 'yes' ]] && find_keyboard; then
    detach_keyboard
    flash_firmware_dfu
elif find_bootloader; then
    info "No keyboard found but found an STM32 DFU Bootloader ..."
    flash_firmware_dfu
else
    die "No keyboard, nor bootloader found"
fi
